version: "3.8"

services:
#IrregularityPoC APP #################################################################
    #####SQLServer DataBase as Docker
    # data: 
    #     container_name: dealstore_db
    #     image: waelamer/dealstore_db:1.0.0
    #     ports: 
    #         - "1433:1433"
    #     environment:
    #         - ACCEPT_EULA=Y
    #         - SA_PASSWORD=4SY3yB6JvwJHsbYZuXjP
    #     volumes: 
    #         - sqldata:/var/opt/mssql 
    #     networks:
    #         - dealstoreweb-app
    #     depends_on:
    #         - loki
    #     logging:
    #       driver: loki
    #       options:
    #         loki-url: "http://localhost:3100/loki/api/v1/push"
#####Backend Microservice/API "System"
    system:
        container_name: dealstore_backend_system
        image: waelamer/dealstore_backend_system:2.0.1
        build:
            context: ./Backend.System
            dockerfile: ./Dockerfile        
        ports:
            - "8083:80"
        environment:
            - OTEL_EXPORTER_OTLP_ENDPOINT=otel-collector:4317
        hostname: "deal"
        # command: 
        #     telegraf --config telegraf/telegraf.conf
        networks: 
            - dealstoreweb-app
        depends_on:
            - loki
        logging:
          driver: loki
          options:
            loki-url: "http://localhost:3100/loki/api/v1/push"      
    #####Backend Microservice/API "Deal"
    deal:
        container_name: dealstore_backend_deal
        image: waelamer/dealstore_backend_deal:2.0.1
        build:
            context: ./Backend.Deal
            dockerfile: ./Dockerfile        
        ports:
            - "8082:80"
        environment:
            - OTEL_EXPORTER_OTLP_ENDPOINT=otel-collector:4317
        hostname: "deal"
        # command: 
        #     telegraf --config telegraf/telegraf.conf
        networks: 
            - dealstoreweb-app
        depends_on:
            - loki
        logging:
          driver: loki
          options:
            loki-url: "http://localhost:3100/loki/api/v1/push"
    #########Backend Microservice/API "Provider"
    provider:
        container_name: dealstore_backend_provider
        image: waelamer/dealstore_backend_provider:2.0.1
        build:
            context: ./Backend.Provider
            dockerfile: ./Dockerfile        
        ports:
            - "8081:80"
        environment:
            - OTEL_EXPORTER_OTLP_ENDPOINT=otel-collector:4317
        hostname: "provider"
        # command: 
            # telegraf --config telegraf/telegraf.conf
        networks: 
            - dealstoreweb-app
        depends_on:
            - loki
        logging:
          driver: loki
          options:
            loki-url: "http://localhost:3100/loki/api/v1/push"

    #########Frontend 
    frontend:
        container_name: dealstore_frontend
        image: waelamer/dealstore_frontend:2.0.1
        build:
            context: ./Frontend
            dockerfile: ./Dockerfile        
        ports:
            - "8080:8080"
        environment:
            - VUE_APP_ROOT_API_P=http://localhost:8081
            - VUE_APP_ROOT_API_D=http://localhost:8082
            - OTEL_EXPORTER_OTLP_ENDPOINT=otel-collector:4317
        hostname: "frontend"
        depends_on:
            - loki
        networks:
            - dealstoreweb-app
        # command: 
                # telegraf --config /app/telegraf/telegraf.conf
        logging:
          driver: loki
          options:
            loki-url: "http://localhost:3100/loki/api/v1/push"

#Monitotoring Tools #######################################################################
    loki:
        # container_name: dealstore_MonitoringTool_LOKI
        image: grafana/loki:2.4.0        
        volumes:
            - ./loki:/etc/loki
        ports:
            - "3100:3100"
        restart: unless-stopped
        command: -config.file=/etc/loki/loki-config.yml
        networks:
            - dealstoreweb-app
    
    grafana:
        # container_name: dealstore_MonitoringTool_GRAFANA
        image: grafana/grafana:latest
        user: "1000"
        volumes:
        - ./grafana:/var/lib/grafana
        ports:
            - "3000:3000"
        depends_on:
            - loki
        # links:
        #     - influxdb
        restart: unless-stopped
        networks:
            - dealstoreweb-app

    # influxdb:
    #     image: influxdb:1.8-alpine
    #     container_name: influxdb
    #     restart: always
    #     environment:
    #         - INFLUXDB_DB=influx
    #         - INFLUXDB_ADMIN_USER=admin
    #         - INFLUXDB_ADMIN_PASSWORD=admin
    #     ports:
    #         - '8086:8086'
    #     volumes:
    #         - influxdb_data:/var/lib/influxdb
    #     networks:
    #         - dealstoreweb-app
    
    jaeger-all-in-one:
        image: jaegertracing/all-in-one:latest
        ports:
        - "16686:16686"
        - "14268"
        - "14250"
        networks:
            - dealstoreweb-app

    zipkin-all-in-one:
        image: openzipkin/zipkin:latest
        ports:
        - "9411:9411"
        networks:
            - dealstoreweb-app

    otel-collector:
        image: otel/opentelemetry-collector-contrib-dev:latest
        command: ["--config=/etc/otel-collector-config.yaml", ""]
        volumes:
        - ./OpenTelemetryCollector/otel-collector-config.yaml:/etc/otel-collector-config.yaml
        ports:
        - "1888:1888"   # pprof extension
        - "8888:8888"   # Prometheus metrics exposed by the collector
        - "8889:8889"   # Prometheus exporter metrics
        - "13133:13133" # health_check extension
        - "4317"        # OTLP gRPC receiver
        - "55670:55679" # zpages extension
        depends_on:
        - jaeger-all-in-one
        - zipkin-all-in-one
        networks:
            - dealstoreweb-app

    # prometheus:
    #     container_name: prometheus
    #     image: prom/prometheus:latest
    #     volumes:
    #     - ./prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml
    #     ports:
    #     - "9090:9090"
    #     networks:
    #         - dealstoreweb-app
        
networks:
    dealstoreweb-app:
volumes:
    sqldata:
    # influxdb_data:

# Only dealstore install 
# FrontEnd:
# docker run -d -p 8080:8080 --name dealstore_frontend -e VUE_APP_ROOT_API_P=http://localhost:8082 -e VUE_APP_ROOT_API_D=http://localhost:8081 waelamer/dealstore_frontend:1.0.0
# Backend:
# docker run -d -p 8082:80 --name dealstore_backend_deal waelamer/dealstore_backend_deal:1.1.2
# docker run -d -p 8081:80 --name dealstore_backend_provider waelamer/dealstore_backend_provider:1.1.2
# DB:
# docker run -d -p 1433:1433 --name dealstore_db -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=4SY3yB6JvwJHsbYZuXjP" --env MSSQL_AGENT_ENABLED=True --mount source=dealstore_db_sqldata,target=/var/opt/mssql -d waelamer/dealstore_db:1.0.0

# docker-compose up -d --force-recreate 
#docker-compose build
#docker-compose push